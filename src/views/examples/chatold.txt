/*global google*/ 
import moment from "moment";
import React from "react";
import { BrowserRouter, Switch, Route } from "react-router-dom";
// reactstrap components
import { Card, Container, Row, Button } from "reactstrap";
import ReactLoading from 'react-loading'

// import { HeatmapLayer } from '@react-google-maps/api';
import UserNavbar from "components/Navbars/UserNavbar.jsx";
import HeatmapLayer from "react-google-maps/lib/components/visualization/HeatmapLayer";
import SearchBox from "react-google-maps/lib/components/places/SearchBox";
import MarkerWithLabel from "react-google-maps/lib/components/addons/MarkerWithLabel";
import {firebase} from "../../services/firebase";
import Timeline from "../examples/Timeline";
import {myFirestore, myStorage} from "../../services/firebase";

import { Link } from "react-router-dom";

const userId = JSON.parse(localStorage.getItem('uid'));



class chat extends React.Component {
    firestoreUsersRef = firebase.firestore().collection("users");
    firestorePostRef = firebase.firestore().collection("posts");
    firestoreFollowingRef = firebase.firestore().collection("following").doc(userId).collection("userFollowing");    
    user = firebase.auth().currentUser;
 constructor(props) {
        super(props)
        this.state = {
//        user: firebase.auth().currentUser,
// userId: this.props.item.userId,
userName:"userName",          
name: "Name",
friendName:"Friend",
FriendUName:"Friend UName",
profilePic:
"https://image.shutterstock.com/image-vector/vector-man-profile-icon-avatar-260nw-1473553328.jpg",
friendPic:
"https://image.shutterstock.com/image-vector/vector-man-profile-icon-avatar-260nw-1473553328.jpg",

            followedUsers: [],
            isLoading: false,
            inputValue: ''
        }
        this.currentUserId = JSON.parse(localStorage.getItem('uid'))
        this.currentUserAvatar = this.profiePic
        this.listMessage = []
        this.currentPeerUser = localStorage.getItem("Fuid")
        this.currentPeerUserId = JSON.parse(localStorage.getItem("Fuid"));
        this.groupChatId = null
        this.removeListener = null
        // this.currentPhotoFile = null
    }


      getCurrentUsername(){
        this.firestoreUsersRef.doc(this.user.uid).get().then((document)=>{
          this.setState({currentUsername: document.data().username})
      });
      }

    componentDidUpdate() {

        this.scrollToBottom()
    }

    componentDidMount() {
        // For first render, it's not go through componentWillReceiveProps
        const { item } = this.props;

        this.getListHistory()

    }



    getProfilePic = (friendId) =>{
        const firebaseProfilePic =  firebase.storage().ref().child("profilePics/("+this.currentPeerUserId+")ProfilePic");
        firebaseProfilePic.getDownloadURL().then((url)=> {
        
          // Inserting into an State and local storage incase new device:
          this.setState({ friendPic: url });
        })
        .catch(error => {
          // Handle any errors
          switch (error.code) {
            case "storage/object-not-found":
              // File doesn't exist
              this.setState({
                friendPic:"https://images.unsplash.com/photo-1502630859934-b3b41d18206c?w=500&h=500&fit=crop",
                });
              break;
              default:
          }
          alert(error);
        });
    }

    componentWillMount = () => {
        this.getFollowedUsers();
       this.getProfilePic();
      
    
        firebase
          .firestore()
          .collection("users")
          .doc(this.currentUserId)
          .onSnapshot(doc => {
            const res = doc.data();
    
            if(res!=null){
            this.setState({
              username: res.username,
              bio: res.bio,
              name: res.name,
              email: res.email,
    
            });}
            console.log(res);
          });
        // profile pic
        const firebaseProfilePic =  firebase
          .storage()
          .ref()
          .child("profilePics/(" + this.currentUserId + ")ProfilePic");
        firebaseProfilePic
          .getDownloadURL()
          .then(url => {
            // Inserting into an State and local storage incase new device:
            this.setState({ profilePic: url });
          })
          .catch(error => {
            // Handle any errors
            switch (error.code) {
              case "storage/object-not-found":
                // File doesn't exist
                this.setState({
                  profilePic:"https://images.unsplash.com/photo-1502630859934-b3b41d18206c?w=500&h=500&fit=crop",
                  });
                break;
                default:
            }
            alert(error);
          });
      };

    componentWillUnmount() {


        if (this.removeListener) {
            this.removeListener()
        }
    }

    componentWillReceiveProps(newProps) {
        if (newProps.currentPeerUser) {
            this.currentPeerUser = newProps.currentPeerUser
            this.getListHistory()
        }
    }

    getListHistory = () => {
        if (this.removeListener) {
            this.removeListener()
        }
        this.listMessage.length = 0
        this.setState({isLoading: true})
        if (
    (            this.currentUserId) <=
     (       this.currentPeerUserId)
        ) {
            this.groupChatId = `${this.currentUserId}-${this.currentPeerUserId}`
        } else {
            this.groupChatId = `${this.currentPeerUserId}-${this.currentUserId}`
        }

        // Get history and listen new data added
        this.removeListener = myFirestore
            .collection("messages")
            .doc(this.groupChatId)
            .collection("msg")
            .onSnapshot(
                snapshot => {
                    snapshot.docChanges().forEach(change => {
                        if (change.type === 'added') {
                            this.listMessage.push(change.doc.data())
                        }
                    })
                    this.setState({isLoading: false})
                },
                err => {
                    this.props.showToast(0, err.toString())
                }
            )
    }

    onSendMessage = (content, type) => {

        if (content.trim() === '') {
            return
        }

        const timestamp = moment()
        .valueOf()
        .toString()

        const itemMessage = {
            idFrom: this.currentUserId,
            idTo: this.currentPeerUserId,
            timestamp: timestamp,
            content: content.trim(),
            type: type
        }

        myFirestore
            .collection("messages")
            .doc(this.groupChatId)
            .collection("msg")
            .doc(timestamp)
            .set(itemMessage)
            .then(() => {
                this.setState({inputValue: ''})
            })
            .catch(err => {
                this.props.showToast(0, err.toString())
            })
    }

    onKeyboardPress = event => {
        if (event.key === 'Enter') {
            this.onSendMessage(this.state.inputValue, 0)
        }
    }

    scrollToBottom = () => {
        if (this.messagesEnd) {
            this.messagesEnd.scrollIntoView({})
        }
    }



    // Get all the users the current user3 is following
getFollowedUsers = async() => {
    let users = [];
    await this.firestoreFollowingRef.get().then((querySnapshot)=>{
      querySnapshot.forEach((docSnap) =>{
        users.push(docSnap.id);
      });
    // this.setState({followedUsers: users});
    });
    this.setState({followedUsers: users});
    // console.log(this.state.followedUsers);
  }
 
  
  
 
  renderListMessage = () => {
    if (this.listMessage.length > 0) {
        let viewListMessage = []
        this.listMessage.forEach((item, index) => {
            if (item.idFrom === this.currentUserId) {
                // Item right (my message)
                if (item.type === 0) {
                    viewListMessage.push(
                        <div className="viewItemRight" key={item.timestamp}>
                            <span className="textContentItem">{item.content}</span>
                        </div>
                    )
                } else if (item.type === 1) {
                    viewListMessage.push(
                        <div className="viewItemRight2" key={item.timestamp}>
                            <img
                                className="imgItemRight"
                                src={item.content}
                                alt="content message"
                            />
                        </div>
                    )
                } else {
                    viewListMessage.push(
                        <div className="viewItemRight3" key={item.timestamp}>
                            <img
                                className="imgItemRight"
                                src={this.getGifImage(item.content)}
                                alt="content message"
                            />
                        </div>
                    )
                }
            } else {
                // Item left (peer message)
                if (item.type === 0) {
                    viewListMessage.push(
                        <div className="viewWrapItemLeft" key={item.timestamp}>
                            <div className="viewWrapItemLeft3">
                                {this.isLastMessageLeft(index) ? (
                                    <img
                                        src={this.currentPeerUser.photoUrl}
                                        alt="avatar"
                                        className="peerAvatarLeft"
                                    />
                                ) : (
                                    <div className="viewPaddingLeft"/>
                                )}
                                <div className="viewItemLeft">
                                    <span className="textContentItem">{item.content}</span>
                                </div>
                            </div>
                            {this.isLastMessageLeft(index) ? (
                                <span className="textTimeLeft">
                {moment(Number(item.timestamp)).format('ll')}
              </span>
                            ) : null}
                        </div>
                    )
                } else if (item.type === 1) {
                    viewListMessage.push(
                        <div className="viewWrapItemLeft2" key={item.timestamp}>
                            <div className="viewWrapItemLeft3">
                                {this.isLastMessageLeft(index) ? (
                                    <img
                                        src={this.currentPeerUser.photoUrl}
                                        alt="avatar"
                                        className="peerAvatarLeft"
                                    />
                                ) : (
                                    <div className="viewPaddingLeft"/>
                                )}
                                <div className="viewItemLeft2">
                                    <img
                                        className="imgItemLeft"
                                        src={item.content}
                                        alt="content message"
                                    />
                                </div>
                            </div>
                            {this.isLastMessageLeft(index) ? (
                                <span className="textTimeLeft">
                {moment(Number(item.timestamp)).format('ll')}
              </span>
                            ) : null}
                        </div>
                    )
                } else {
                    viewListMessage.push(
                        <div className="viewWrapItemLeft2" key={item.timestamp}>
                            <div className="viewWrapItemLeft3">
                                {this.isLastMessageLeft(index) ? (
                                    <img
                                        src={this.currentPeerUser.photoUrl}
                                        alt="avatar"
                                        className="peerAvatarLeft"
                                    />
                                ) : (
                                    <div className="viewPaddingLeft"/>
                                )}
                                <div className="viewItemLeft3" key={item.timestamp}>
                                    <img
                                        className="imgItemLeft"
                                        src={this.getGifImage(item.content)}
                                        alt="content message"
                                    />
                                </div>
                            </div>
                            {this.isLastMessageLeft(index) ? (
                                <span className="textTimeLeft">
                {moment(Number(item.timestamp)).format('ll')}
              </span>
                            ) : null}
                        </div>
                    )
                }
            }
        })
        return viewListMessage
    } else {
        return (
            <div className="viewWrapSayHi">
                <span className="textSayHi">Say hi to new friend</span>
                <img
                    className="imgWaveHand"
                    src={this.state.profilePic}
                    alt="wave hand"
                />
            </div>
        )
    }
}


hashString = str => {
    let hash = 0
    for (let i = 0; i < str.length; i++) {
        hash += Math.pow(str.charCodeAt(i) * 31, str.length - i)
        hash = hash & hash // Convert to 32bit integer
    }
    return hash
}


isLastMessageLeft(index) {
    if (
        (index + 1 < this.listMessage.length &&
            this.listMessage[index + 1].idFrom === this.currentUserId) ||
        index === this.listMessage.length - 1
    ) {
        return true
    } else {
        return false
    }
}

isLastMessageRight(index) {
    if (
        (index + 1 < this.listMessage.length &&
            this.listMessage[index + 1].idFrom !== this.currentUserId) ||
        index === this.listMessage.length - 1
    ) {
        return true
    } else {
        return false
    }
}


  render() {
    
  
    return (
      <>
<UserNavbar/>
<main className="profile-page" ref="main">

<section>
<div className="viewChatBoard">
                {/* Header */}
                <div className="headerChatBoard">
                    <img
                        className="viewAvatarItem"
                                                    src={this.state.friendPic}
                        alt="icon avatar"
                    />
                 <span className="textHeaderChatBoard">
            {/* {this.currentPeerUserId.name} */}
            {this.name}
          </span>
                </div>

                {/* List message */}
                <div className="viewListContentChat">
                    {this.renderListMessage()}
                    <div
                        style={{float: 'left', clear: 'both'}}
                        ref={el => {
                            this.messagesEnd = el
                        }}
                    />
                </div>

                {/* View bottom */}
                <div className="viewBottom">
                    <img
                        className="icOpenGallery"
                        src={this.state.profilePic}
                        alt="icon open gallery"
                        onClick={() => this.refInput.click()}
                    />
                    
                    <input
                        ref={el => {
                            this.refInput = el
                        }}
                        accept="image/*"
                        className="viewInputGallery"
                        type="file"
                        onChange={this.onChoosePhoto}
                    />


                    <input
                        className="viewInput"
                        placeholder="Type your message..."
                        value={this.state.inputValue}
                        onChange={event => {
                            this.setState({inputValue: event.target.value})
                        }}
                        onKeyPress={this.onKeyboardPress}
                    />
                    <img
                        className="icSend"
                            src={this.state.profilePic}
                        alt="icon send"
                        onClick={() => this.onSendMessage(this.state.inputValue, 0)}
                    />
                    
                </div>

                {/* Loading */}
                {this.state.isLoading ? (
                    <div className="viewLoading">
                        <ReactLoading
                            type={'spin'}
                            color={'#203152'}
                            height={'3%'}
                            width={'3%'}
                        />
                    </div>
                ) : null}
            </div>
    
</section>

<section className="section-profile-cover section-shaped my-0">
            {/* Circles background */}
            <div className="shape shape-style-1 shape-default alpha-4">
              <span />
              <span />
              <span />
              <span />
              <span />
              <span />
              <span />
            </div>
            {/* SVG separator */}
            <div className="separator separator-bottom separator-skew">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                preserveAspectRatio="none"
                version="1.1"
                viewBox="0 0 2560 100"
                x="0"
                y="0"
              >
                <polygon
                  className="fill-white"
                  points="2560 0 2560 100 0 100"
                />
              </svg>
            </div>
          </section>


          <section>
<div class="container pt-5 mb-5 upper mt--300">
  <div class="row flex-row chat">
    <div class="col-lg-4">
      <div class="card bg-secondary">
        <form class="card-header mb-3">
          <div class="input-group input-group-alternative">
            <input type="text" class="form-control" placeholder="Search contact"/>
            <div class="input-group-append">
              <span class="input-group-text"><i class="ni ni-zoom-split-in"></i></span>
            </div>
          </div>
        </form>
        <div class="list-group list-group-chat list-group-flush">
          <a href="javascript:;" class="list-group-item active bg-gradient-primary">
            <div class="media">
              <img alt="Image" src={this.state.friendPic} class="avatar"/>
              <div class="media-body ml-2">
                <div class="justify-content-between align-items-center">
                  <h6 class="mb-0 text-white">{this.state.name  }
                    <span class="badge badge-success"></span>
                  </h6>
                  <div>
                    <small>Typing...</small>
                  </div>
                </div>
              </div>
            </div>
          </a>
        </div>
      </div>
    </div>
    <div class="col-lg-8">
      <div class="card">
        <div class="card-header d-inline-block">
          <div class="row">
            <div class="col-md-10">
              <div class="media align-items-center">
                <img alt="Image" src={this.state.profilePic} class="avatar shadow"/>
                <div class="media-body">
                <h6 class="mb-0 d-block">{this.state.name}</h6>
                  <span class="text-muted text-small">last seen today at 1:53am</span>
                 </div>
              </div>
            </div>
            <div class="col-md-1 col-3">
              <div class="dropdown">
                <button class="btn btn-link text-primary" type="button" data-toggle="dropdown">
                  <i class="ni ni-settings-gear-65"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                  <a class="dropdown-item" href="javascript:;">
                    <i class="ni ni-single-02"></i> Profile
                  </a>
                  <a class="dropdown-item" href="javascript:;">
                    <i class="ni ni-notification-70"></i> Mute conversation
                  </a>
                  <a class="dropdown-item" href="javascript:;">
                    <i class="ni ni-key-25"></i> Block
                  </a>
                  <a class="dropdown-item" href="javascript:;">
                    <i class="ni ni-button-power"></i> Clear chat
                  </a>
                  <div class="dropdown-divider"></div>
                  <a class="dropdown-item" href="javascript:;">
                    <i class="ni ni-fat-remove"></i> Delete chat
                  </a>
                </div>
              </div>
            </div>
            <div class="col-md-1 col-3">
              <button class="btn btn-link btn-text" type="button" data-toggle="tooltip" data-placement="top" title="Video call">
                <i class="ni ni-book-bookmark"></i>
              </button>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="row justify-content-start">
            <div class="col-auto">
              <div class="card">
                <div class="card-body p-2">
                  <p class="mb-1">
                    It contains a lot of good lessons about effective practices
                  </p>
                  <div>
                    <small class="opacity-60"><i class="far fa-clock"></i> 3:14am</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row justify-content-end text-right">
            <div class="col-auto">
              <div class="card bg-gradient-primary text-white">
                <div class="card-body p-2">
                  <p class="mb-1">
                    Can it generate daily design links that include essays and data visualizations ?<br />
                  </p>
                  <div>
                    <small class="opacity-60">3:30am</small>
                    <i class="ni ni-check-bold"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row mt-4">
            <div class="col-md-12 text-center">
              <span class="badge text-default">Wed, 3:27pm</span>
            </div>
          </div>
          <div class="row justify-content-start">
            <div class="col-auto">
              <div class="card">
                <div class="card-body p-2">
                  <p class="mb-1">
                    Yeah! Responsive Design is geared towards those trying to build web apps
                  </p>
                  <div>
                    <small class="opacity-60"><i class="far fa-clock"></i> 4:31pm</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row justify-content-end text-right">
            <div class="col-auto">
              <div class="card bg-gradient-primary text-white">
                <div class="card-body p-2">
                  <p class="mb-1">
                    Excellent, I want it now !
                  </p>
</div></div></div></div>
          <div class="row justify-content-start">
            <div class="col-auto">
              <div class="card ">
                <div class="card-body p-2">
                  <div class="spinner">
                    <div class="bounce1"></div>
                    <div class="bounce2"></div>
                    <div class="bounce3"></div>
                  </div>
                  <p class="d-inline-block mr-2 mb-2">
                    Typing...
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="card-footer d-block">
          <div class="form-group">
            <div class="input-group mb-4">
              {/* <input class="form-control" placeholder="Your message" type="text"/> */}
              <input
class="form-control"
placeholder="Your message"
type="text"
                            value={this.state.inputValue}
                            onChange={event => {
                                this.setState({inputValue: event.target.value})
                            }}
                            onKeyPress={this.onKeyboardPress}
                        />
                         <Button
                            onClick={() => this.onSendMessage(this.state.inputValue, 0)}>
                                Send
                        </Button>
              <div class="input-group-append">
                <span class="input-group-text">
                  <i class="ni ni-send"></i>
                </span>
              </div>
  {/* Loading */}
  {this.state.isLoading ? (
                        <div className="viewLoading">
                            <ReactLoading
                                type={'spin'}
                                color={'#203152'}
                                height={'3%'}
                                width={'3%'}
                            />
                        </div>
                    ) : null}

            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</section>









</main>
      </>
    );
  }
}

export default chat;


